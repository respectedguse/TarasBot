import disnake
from disnake.ext import commands
from disnake import TextInputStyle
from disnake.ui import Button, View
import json
import random
import datetime
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import math
import time
import config
import sys
sys.path.insert(0, f'{config.CD}')
import main

bot = main.bot

class NoInfoDate():
#–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    member = None
    guild = None
    
    async def check_user_data():
        with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        members = []
        for m in data[f'{NoInfoDate.guild.id}']:
            members.append(f"{m}")
        if f"{NoInfoDate.member.id}" not in members:
            await NoInfoDate.no_data()
        return        

    async def no_data():
        with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        numbers = "0123456789"

        first = "".join(random.sample(numbers, 4))
        second = "".join(random.sample(numbers, 4))
        third = "".join(random.sample(numbers, 4))
        fourth = "".join(random.sample(numbers, 4))

        data[f'{NoInfoDate.guild.id}'][f'{NoInfoDate.member.id}'] = {}
        data[f'{NoInfoDate.guild.id}'][f'{NoInfoDate.member.id}']['cash'] = 0
        data[f'{NoInfoDate.guild.id}'][f'{NoInfoDate.member.id}']['bank'] = 0 
        data[f'{NoInfoDate.guild.id}'][f'{NoInfoDate.member.id}']['date'] = datetime.datetime.today().strftime('%m/%d')
        data[f'{NoInfoDate.guild.id}'][f'{NoInfoDate.member.id}']['number'] = f"{first} {second} {third} {fourth}"

        with open('data/economy/banking_system.json', 'w', encoding='utf-8') as w:
            json.dump(data, w, indent=4)
        return

class MyView(disnake.ui.View):#–æ—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    def __init__(self):
        super().__init__(timeout=60)

    @disnake.ui.button(emoji="üí≥", label="–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞", disabled=False)
    async def button_callback_1_active(self, button, interaction):
        with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        await interaction.response.defer()

        font_type = 'fonts/AABebasNeue.ttf'
        bank_card = Image.open('images/banking system/template_card.png')
        draw = ImageDraw.Draw(bank_card)

        #card_number
        card_number = f"{data[f'{interaction.guild.id}'][f'{interaction.author.id}']['number']}"
        font = ImageFont.truetype(font_type, 250)
        text_width = draw.textlength(card_number, font)
        x_cd = 1108
        y_cd = 810
        draw.text((x_cd,y_cd), card_number, font=font)

        #all_money
        all_money = f"{data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash'] + data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']}"
        font1 = ImageFont.truetype(font_type, 200)
        text_width = draw.textlength(all_money, font1)
        x_allm=450
        y_allm=1400
        draw.text((x_allm,y_allm), all_money, font=font1)

        #bank
        bank = f"{data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']}"
        font2 = ImageFont.truetype(font_type, 200)
        text_width = draw.textlength(all_money, font1)
        x_b=1750
        y_b=1400
        draw.text((x_b,y_b), bank, font=font2)

        #money
        money = f"{data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash']}"
        font2 = ImageFont.truetype(font_type, 200)
        text_width = draw.textlength(all_money, font1)
        x_m=2600
        y_m=1400
        draw.text((x_m,y_m), money, font=font2)

        #date
        date = f"{data[f'{interaction.guild.id}'][f'{interaction.author.id}']['date']}"
        font3 = ImageFont.truetype(font_type, 200)
        text_width = draw.textlength(all_money, font1)
        x_d=3000
        y_d=1850
        draw.text((x_d,y_d), date, font=font3)

        #user_name
        user_name = f"{interaction.author}"
        font3 = ImageFont.truetype(font_type, 200)
        text_width = draw.textlength(all_money, font1)
        x_name=800
        y_name=1850
        draw.text((x_name,y_name), user_name, font=font3)

        #avatar
        avatar = interaction.author.avatar.with_size(128)
        avt = BytesIO(await avatar.read())
        img = Image.open(avt)
        img = img.resize((420, 420))
        
        mask = Image.new('L', (420, 420), 0)
        radius = min(img.width // 2, img.height // 2)
        center = radius, radius
        draw = ImageDraw.Draw(mask)
        draw.ellipse((0, 0, radius * 2, radius * 2), fill=250)
        img.putalpha(mask)
    
        img.resize((420, 420))
        bank_card.paste(img, (292, 1675), img)
        width, height = bank_card.size
        draw = ImageDraw.Draw(bank_card)
    
        bank_card.save("images/banking system/bank_card.png")
        
        view=View_BankCard()

        emb = disnake.Embed(title=f"üí≥–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫", colour=disnake.Color.blue(), timestamp=interaction.created_at)
        emb.set_image(file=disnake.File('images/banking system/bank_card.png'))
        emb.set_footer(text = f"{config.BY_LINE}", icon_url = bot.user.display_avatar.url)
        await interaction.send(embed=emb, view=view, ephemeral=True)

        with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        await interaction.response.defer()

        view=View()
        view.remove_item(button)

        emb = disnake.Embed(title="üí∏–°–∏—Å—Ç–µ–º–∞ –≥—Ä–æ—à–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∫–∞–∑—É", colour=disnake.Color.blue(), timestamp=interaction.created_at)
        emb.add_field(name="–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É:", value=f"{data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']+data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash']}‚Ç¥")
        emb.add_field(name="–ì–æ—Ç—ñ–≤–∫–∏:", value=f"{data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash']}‚Ç¥")
        emb.add_field(name="–£ –±–∞–Ω–∫—É:", value=f"{data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']}‚Ç¥")
        emb.set_footer(text = f"{config.BY_LINE}", icon_url = bot.user.display_avatar.url)
        await interaction.send(embed=emb, view=view)

    @disnake.ui.button(emoji="üíµ", label="–î–µ–ø–æ–∑–∏—Ç", disabled=False)
    async def button_callback_3_active(self, button, interaction):
        with open('data/economy/deposite_system.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        guilds = []
        for g in data:
            guilds.append(f"{g}")
        if f"{interaction.guild.id}" not in guilds:
            data[f'{interaction.guild.id}'] = {}
            with open('data/economy/deposite_system.json', 'w', encoding='utf-8') as w:
                json.dump(data, w, indent=4)

        members = []
        for m in data[f'{interaction.guild.id}']:
            members.append(f"{m}")

        if f"{interaction.guild.id}" not in members:
            data[f'{interaction.guild.id}'][f'{interaction.author.id}'] = {}
            data[f'{interaction.guild.id}'][f'{interaction.author.id}']['money'] = 0
            data[f'{interaction.guild.id}'][f'{interaction.author.id}']['level'] = 0
            data[f'{interaction.guild.id}'][f'{interaction.author.id}']['date'] = datetime.datetime.today().strftime('%m/%d')

            with open('data/economy/deposite_system.json', 'w', encoding='utf-8') as w:
                json.dump(data, w, indent=4)

        emb = disnake.Embed(title="üí∏–°–∏—Å—Ç–µ–º–∞ –¥–µ–ø–æ–∑–∏—Ç—É", colour=disnake.Color.blue(), timestamp=interaction.created_at)
        emb.add_field(name="–ù–∞ –≤–∞—à–æ–º—É –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–º—É —Ä–∞—Ö—É–Ω–∫—É:", value=f"{data[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']}‚Ç¥")
        emb.set_footer(text = f"{config.BY_LINE}", icon_url = bot.user.display_avatar.url)
        await interaction.send(embed=emb, view=View_Deposite(), ephemeral=True)

class MyView_Disable(disnake.ui.View):#–æ—Å–Ω–æ–≤–Ω—ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏
    @disnake.ui.button(emoji="üí≥", label="–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞", disabled=True)
    async def button_callback_1_disabled(self, button, interaction):
        return
    @disnake.ui.button(emoji="üí∏", label="–ü–µ—Ä–µ–∫–∞–∑", disabled=True)
    async def button_callback_2_disabled(self, button, interaction):
        return
    @disnake.ui.button(emoji="üíµ", label="–î–µ–ø–æ–∑–∏—Ç", disabled=True)
    async def button_callback_3_disabled(self, button, interaction):
        return

#-------------------------------------BankCard_button_start----------------------------------------
class View_BankCard(disnake.ui.View):#–∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫
    def __init__(self):
        super().__init__()

    @disnake.ui.button(emoji="üì§", label="–ó–Ω—è—Ç–∏ –≥–æ—Ç—ñ–≤–∫—É", disabled=False)
    async def button_callback_bankcard_1(self, button, interaction:disnake.AppCmdInter):
        if interaction.user.id != interaction.author.id:
            await interaction.response.send_message("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–Ω–æ–ø–∫—É, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤–∏ –∞–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å—É!", ephemeral=True)
        else:
            await interaction.response.send_modal(modal=BankCard_Modal_Take_off_money())
    
    @disnake.ui.button(emoji="üì•", label="–ü–æ–∫–ª–∞—Å—Ç–∏ –≥–æ—Ç—ñ–≤–∫—É", disabled=False)
    async def button_callback_bankcard_2(self, button, inter:disnake.AppCmdInter):
        if inter.user.id != inter.author.id:
            await inter.response.send_message("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–Ω–æ–ø–∫—É, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤–∏ –∞–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å—É!", ephemeral=True)
        else:
            await inter.response.send_modal(modal=BankCard_Modal_Put_money_down())

class BankCard_Modal_Take_off_money(disnake.ui.Modal):#–ú–æ–¥—É–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏
    def __init__(self):
        comp = [
            disnake.ui.TextInput(
                label="–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –∑–Ω—è—Ç—Ç—è –∑ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É",
                placeholder="—Å—É–º–∞ ‚Ç¥",
                style=TextInputStyle.short,
                max_length=9,
                min_length=1,
                custom_id="take_off"
            )
        ]
        super().__init__(title="–ó–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏ –∑ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ä–∞—Ö—É–Ω–∫–∞", components=comp)

    async def callback(self, interaction:disnake.ModalInteraction):
        with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash']+int(f"{interaction.text_values['take_off']}") <= 100000000:
            if data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']-int(f"{interaction.text_values['take_off']}")>=0:
                data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash'] = data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash']+int(f"{interaction.text_values['take_off']}")
                data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank'] = data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']-int(f"{interaction.text_values['take_off']}") 

                with open('data/economy/banking_system.json', 'w', encoding='utf-8') as w:
                    json.dump(data, w, indent=4)

                await interaction.response.send_message(f"–û–ø–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –í–∏ –∑–Ω—è–ª–∏ {interaction.text_values['take_off']}‚Ç¥", ephemeral=True)
            else:
                await interaction.response.send_message(f"–ù–∞ –≤–∞—à–æ–º—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤! –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–Ω—è—Ç–∏ `{interaction.text_values['take_off']}‚Ç¥`!\n–í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω—è—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ {data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']}", ephemeral=True)    
        else:
            await interaction.response.send_message(f"–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –º–∞—Ç–∏ –±—ñ–ª—å—à–µ 100.000.000‚Ç¥ –Ω–∞ —Ä—É–∫–∞—Ö! –í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω—è—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ, –∞–Ω—ñ–∂ {100000000-data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash']}‚Ç¥!", ephemeral=True)

class BankCard_Modal_Put_money_down(disnake.ui.Modal):#–ú–æ–¥—É–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤–Ω–µ—Å–µ–Ω–Ω—è –≥–æ—Ç—ñ–≤–∫–∏
    def __init__(self):
        comp = [
            disnake.ui.TextInput(
                label="–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –≤–Ω–µ—Å–µ–Ω–Ω—è –Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫",
                placeholder="—Å—É–º–∞ ‚Ç¥",
                style=TextInputStyle.short,
                max_length=9,
                min_length=1,
                custom_id="put_down"
            )
        ]
        super().__init__(title="–í–Ω–µ—Å–µ–Ω–Ω—è –≥–æ—Ç—ñ–≤–∫–∏ –Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫", components=comp)

    async def callback(self, interaction:disnake.ModalInteraction):
        with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash']-int(f"{interaction.text_values['put_down']}") >=0:
            if data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']+int(f"{interaction.text_values['put_down']}")<=100000000:
                data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash'] = data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash']-int(f"{interaction.text_values['put_down']}")
                data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank'] = data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']+int(f"{interaction.text_values['put_down']}") 

                with open('data/economy/banking_system.json', 'w', encoding='utf-8') as w:
                    json.dump(data, w, indent=4)

                await interaction.response.send_message(f"–û–ø–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –í–∏ –ø–æ–∫–ª–∞–ª–∏ {interaction.text_values['put_down']}‚Ç¥", ephemeral=True)
            else:
                await interaction.response.send_message(f"–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –º–∞—Ç–∏ –±—ñ–ª—å—à–µ 100.000.000‚Ç¥ –Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–º—É —Ä–∞—Ö—É–Ω–∫—É! –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∫–ª–∞—Å—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ, –∞–Ω—ñ–∂ {100000000-data[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']}‚Ç¥!", ephemeral=True)
        else:
            await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥–æ—Ç—ñ–≤–∫–∏! –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–ª–∞—Å—Ç–∏ `{interaction.text_values['put_down']}‚Ç¥`!\n–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∫–ª–∞—Å—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ, –∞–Ω—ñ–∂ {data[f'{interaction.guild.id}'][f'{interaction.author.id}']['cash']}", ephemeral=True)  
#-------------------------------------BankCard_button_end------------------------------------------

#-------------------------------------Deposite_button_start----------------------------------------
class View_Deposite(disnake.ui.View):#–∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–µ–ø–æ–∑–∏—Ç
    def __init__(self):
        super().__init__()

    @disnake.ui.button(emoji="üì•", label="–ü–æ–∫–ª–∞—Å—Ç–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç", disabled=False)
    async def button_callback_deposite_1(self, button, interaction:disnake.AppCmdInter):
        await interaction.response.send_modal(modal=Transaction_Modal_Put_money_down())

    @disnake.ui.button(emoji="üì§", label="–ó–Ω—è—Ç–∏ –∑ –¥–µ–ø–æ–∑–∏—Ç—É", disabled=False)
    async def button_callback_deposite_2(self, button, interaction:disnake.AppCmdInter):
        await interaction.response.send_modal(modal=Transaction_Modal_Take_off_money())

class Transaction_Modal_Take_off_money(disnake.ui.Modal):
    def __init__(self):
        comp = [
            disnake.ui.TextInput(
                label="–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –∑–Ω—è—Ç—Ç—è –∑ –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É",
                placeholder=f"—Å—É–º–∞ ‚Ç¥",
                style=TextInputStyle.short,
                max_length=9,
                min_length=1,
                custom_id="take_off"
            )
        ]
        super().__init__(title="–ó–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏ –∑ –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫–∞", components=comp)

    async def callback(self, interaction:disnake.ModalInteraction):
        with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
            data_bank = json.load(f)
        with open('data/economy/deposite_system.json', 'r', encoding='utf-8') as f1:
            data_dep = json.load(f1)
        
        if int(interaction.text_values['take_off']) <= data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money'] and data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']-int(f"{interaction.text_values['take_off']}")>=0:
            if data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']+int(f"{interaction.text_values['take_off']}") <= 100000000:
                data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']=data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']+int(f"{interaction.text_values['take_off']}")
                data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']=data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']-int(f"{interaction.text_values['take_off']}")

                with open('data/economy/banking_system.json', 'w', encoding='utf-8') as w:
                    json.dump(data_bank, w, indent=4)
                with open('data/economy/deposite_system.json', 'w', encoding='utf-8') as w1:
                    json.dump(data_dep, w1, indent=4)
                    
                await interaction.response.send_message(f"–û–ø–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –ù–∞ –≤–∞—à –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –±—É–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ `{interaction.text_values['take_off']}‚Ç¥`.\n–ó–∞–ª–∏—à–∫–∏:\n–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫: `{data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']}‚Ç¥`\n–î–µ–ø–æ–∑–∏—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: `{data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']}‚Ç¥`", ephemeral=True)
            else:
                await interaction.response.send_message(f"–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–∏—Å–∏—Ç–∏ –ª—ñ–º—ñ—Ç –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–º—É —Ä–∞—Ö—É–Ω–∫—É! –õ—ñ–º—ñ—Ç - `100.000.000‚Ç¥`!\n–í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω—è—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ, –∞–Ω—ñ–∂ `{100000000-data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']}‚Ç¥`!", ephemeral=True)
        else:
            await interaction.response.send_message(f"–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–Ω—è—Ç–∏ –±—ñ–ª—å—à–µ, –∞–Ω—ñ–∂ `{data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']}`‚Ç¥!", ephemeral=True)

class Transaction_Modal_Put_money_down(disnake.ui.Modal):
    def __init__(self):
        comp = [
            disnake.ui.TextInput(
                label="–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –≤–Ω–µ—Å–µ–Ω–Ω—è –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫",
                placeholder=f"—Å—É–º–∞ ‚Ç¥",
                style=TextInputStyle.short,
                max_length=9,
                min_length=1,
                custom_id="put_down"
            )
        ]
        super().__init__(title="–í–Ω–µ—Å–µ–Ω–Ω—è –≥–æ—Ç—ñ–≤–∫–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫", components=comp)

    async def callback(self, interaction:disnake.ModalInteraction):
        with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
            data_bank = json.load(f)
        with open('data/economy/deposite_system.json', 'r', encoding='utf-8') as f1:
            data_dep = json.load(f1)
        
        if int(interaction.text_values['put_down']) <= data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank'] and data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']-int(f"{interaction.text_values['put_down']}")>=0:
            if data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']+int(f"{interaction.text_values['put_down']}") <= 100000000:
                data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']=data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']-int(f"{interaction.text_values['put_down']}")
                data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']=data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']+int(f"{interaction.text_values['put_down']}")

                with open('data/economy/banking_system.json', 'w', encoding='utf-8') as w:
                    json.dump(data_bank, w, indent=4)
                with open('data/economy/deposite_system.json', 'w', encoding='utf-8') as w1:
                    json.dump(data_dep, w1, indent=4)
                    
                await interaction.response.send_message(f"–û–ø–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –ù–∞ –¥–µ–ø–æ–∑–∏—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –±—É–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ `{interaction.text_values['put_down']}‚Ç¥`.\n–ó–∞–ª–∏—à–∫–∏:\n–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫: `{data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']}‚Ç¥`\n–î–µ–ø–æ–∑–∏—Ç–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: `{data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']}‚Ç¥`", ephemeral=True)
            else:
                await interaction.response.send_message(f"–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–∏—Å–∏—Ç–∏ –ª—ñ–º—ñ—Ç –∫–æ—à—Ç—ñ–≤ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–º—É —Ä–∞—Ö—É–Ω–∫—É! –õ—ñ–º—ñ—Ç - `100.000.000‚Ç¥`!\n–í–∏ –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ, –∞–Ω—ñ–∂ `{100000000-data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']}‚Ç¥`!", ephemeral=True)
        else:
            await interaction.response.send_message(f"–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –±—ñ–ª—å—à–µ, –∞–Ω—ñ–∂ `{100000000-data_dep[f'{interaction.guild.id}'][f'{interaction.author.id}']['money']}`‚Ç¥! –ù–∞ –≤—à–æ–º—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–º—É —Ä–∞—Ö—É–Ω–∫—É - `{data_bank[f'{interaction.guild.id}'][f'{interaction.author.id}']['bank']}‚Ç¥!`", ephemeral=True)

#-------------------------------------Deposite_button_end----------------------------------------

class Bank(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name = "bank", description="–ë–∞–Ω–∫ ¬´TarasBot¬ª")
    @commands.guild_only()
    async def bank(self, ctx):
        with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        NoInfoDate.guild = ctx.guild
        
        async def no_guild_data():
            data[f'{ctx.guild.id}'] = {}

            with open('data/economy/banking_system.json', 'w') as w:
                json.dump(data, w, indent=4)

        guilds = []
        for g in data:
            guilds.append(f"{g}")
        if f"{ctx.guild.id}" not in guilds:
            #–¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞(—è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω–∏–π)
            await no_guild_data()


    @bank.sub_command(description="–í—ñ–¥–∫—Ä–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –±–∞–Ω–∫—É ¬´TarasBot¬ª")
    @commands.guild_only()
    async def app(self, inter):
        NoInfoDate.member = inter.author
        await NoInfoDate.check_user_data()
        
        view = MyView()

        emb = disnake.Embed(title="–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ —Å–∏—Å—Ç–µ–º–∞", description="–í—ñ—Ç–∞—î–º–æ –≤ **–ë–∞–Ω–∫—É ¬´TarasBot¬ª**! –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞–ª—å—à—É –æ–ø–µ—Ä–∞—Ü—ñ—é –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–∞–Ω–∫–æ–º ‚Üì‚Üì‚Üì", colour=disnake.Color.blue(), timestamp=inter.created_at)
        emb.set_footer(text=f"{config.BY_LINE}", icon_url=bot.user.display_avatar.url)
        await inter.response.send_message(embed=emb, view=view)

        if await view.wait():
            view=MyView_Disable()
            await inter.edit_original_response(embed=emb, view=view)
        else:
            return

    @bank.sub_command(description="–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ä—Ç–∫–∞")
    @commands.guild_only()
    async def card(self, ctx):
        NoInfoDate.member = ctx.author

        await NoInfoDate.check_user_data()

        with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        
        font_type = 'fonts/AABebasNeue.ttf'
        bank_card = Image.open('images/banking system/template_card.png')
        draw = ImageDraw.Draw(bank_card)

        #card_number
        card_number = f"{data[f'{ctx.guild.id}'][f'{ctx.author.id}']['number']}"
        font = ImageFont.truetype(font_type, 250)
        text_width = draw.textlength(card_number, font)
        x_cd = 1108
        y_cd = 810
        draw.text((x_cd,y_cd), card_number, font=font)

        #all_money
        all_money = f"{data[f'{ctx.guild.id}'][f'{ctx.author.id}']['cash'] + data[f'{ctx.guild.id}'][f'{ctx.author.id}']['bank']}"
        font1 = ImageFont.truetype(font_type, 200)
        text_width = draw.textlength(all_money, font1)
        x_allm=450
        y_allm=1400
        draw.text((x_allm,y_allm), all_money, font=font1)

        #bank
        bank = f"{data[f'{ctx.guild.id}'][f'{ctx.author.id}']['bank']}"
        font2 = ImageFont.truetype(font_type, 200)
        text_width = draw.textlength(all_money, font1)
        x_b=1750
        y_b=1400
        draw.text((x_b,y_b), bank, font=font2)

        #money
        money = f"{data[f'{ctx.guild.id}'][f'{ctx.author.id}']['cash']}"
        font2 = ImageFont.truetype(font_type, 200)
        text_width = draw.textlength(all_money, font1)
        x_m=2600
        y_m=1400
        draw.text((x_m,y_m), money, font=font2)

        #date
        date = f"{data[f'{ctx.guild.id}'][f'{ctx.author.id}']['date']}"
        font3 = ImageFont.truetype(font_type, 200)
        text_width = draw.textlength(all_money, font1)
        x_d=3000
        y_d=1850
        draw.text((x_d,y_d), date, font=font3)

        #user_name
        user_name = f"{ctx.author}"
        font3 = ImageFont.truetype(font_type, 200)
        text_width = draw.textlength(all_money, font1)
        x_name=800
        y_name=1850
        draw.text((x_name,y_name), user_name, font=font3)

        #avatar
        avatar = ctx.author.avatar.with_size(128)
        avt = BytesIO(await avatar.read())
        img = Image.open(avt)
        img = img.resize((420, 420))
        
        mask = Image.new('L', (420, 420), 0)
        radius = min(img.width // 2, img.height // 2)
        center = radius, radius
        draw = ImageDraw.Draw(mask)
        draw.ellipse((0, 0, radius * 2, radius * 2), fill=250)
        img.putalpha(mask)
    
        img.resize((420, 420))
        bank_card.paste(img, (292, 1675), img)
        width, height = bank_card.size
        draw = ImageDraw.Draw(bank_card)
    
        bank_card.save("images/banking system/bank_card.png")
        
        emb = disnake.Embed(title=f"üí≥–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫", colour=disnake.Color.blue(), timestamp=ctx.created_at)
        emb.set_image(file=disnake.File('images/banking system/bank_card.png'))
        emb.set_footer(text = f"{config.BY_LINE}", icon_url = bot.user.display_avatar.url)
        await ctx.send(embed=emb)    

    @bank.sub_command(description="–ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    @commands.guild_only()
    async def balance(self, ctx, member:disnake.Member = commands.Param(default=None, description="–í–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")):
        if member is None:
            member = ctx.author
        
        NoInfoDate.member = member

        if member.bot:
            await ctx.send("–ë–æ—Ç –Ω–µ –º–æ–∂–µ –º–∞—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É!", ephemeral=True)
        else:                
            await NoInfoDate.check_user_data()

            with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
                data = json.load(f)

            emb = disnake.Embed(title=f"–ë–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {member.name}", colour=disnake.Color.blue(), timestamp=ctx.created_at)
            emb.add_field(name="–í—Å—å–æ–≥–æ –≥—Ä–æ—à–µ–π:", value=f"{data[f'{ctx.guild.id}'][f'{member.id}']['cash'] + data[f'{ctx.guild.id}'][f'{member.id}']['bank']}‚Ç¥", inline=False)
            emb.add_field(name="–ì–æ—Ç—ñ–≤–∫–∞:", value = f"{data[f'{ctx.guild.id}'][f'{member.id}']['cash']}‚Ç¥")
            emb.add_field(name="–£ –±–∞–Ω–∫—É:", value = f"{data[f'{ctx.guild.id}'][f'{member.id}']['bank']}‚Ç¥")
            emb.set_footer(text = f"{config.BY_LINE}", icon_url = bot.user.display_avatar.url)
            await ctx.send(embed=emb)

    @bank.sub_command(description="–ü–µ—Ä–µ–∫–∞–∑–∞—Ç–∏ –∫–æ—à—Ç–∏ –Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    
    @commands.guild_only()
    async def transfer(self, ctx, member:disnake.Member = commands.Param(description="–í–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"), money:int=commands.Param(description="–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ")):
        if member.bot:
            await ctx.send("–ë–æ—Ç –Ω–µ –º–æ–∂–µ –º–∞—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É!", ephemeral=True)
        else:
            NoInfoDate.member = ctx.author
            await NoInfoDate.check_user_data()
            NoInfoDate.member = member
            await NoInfoDate.check_user_data()

            with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
                data = json.load(f)

            if data[f'{ctx.guild.id}'][f'{ctx.author.id}']['bank'] - money > 0:
                mn_from = data[f'{ctx.guild.id}'][f'{ctx.author.id}']['bank'] - money
                mn_to = data[f'{ctx.guild.id}'][f'{member.id}']['bank'] + money
                if mn_to > 100000000:
                    await ctx.send(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {member.mention} –Ω–µ –º–æ–∂–µ –º–∞—Ç–∏ –Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –±—ñ–ª—å—à–µ `100.000.000‚Ç¥`! –ù–∞ –±–∞–Ω–∫—ñ–≤—Å—å–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - `{data[f'{ctx.guild.id}'][f'{member.id}']['bank']}‚Ç¥`! –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ `{100000000-data[f'{ctx.guild.id}'][f'{member.id}']['bank']}‚Ç¥`", ephemeral=True)
                else:
                    data[f'{ctx.guild.id}'][f'{ctx.author.id}']['bank'] = mn_from
                    data[f'{ctx.guild.id}'][f'{member.id}']['bank'] = mn_to

                    with open('data/economy/banking_system.json', 'w') as w:
                        json.dump(data, w, indent=4)

                    emb = disnake.Embed(title="–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!", description=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member.mention} –±—É–ª–æ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω–æ `{money}‚Ç¥`\n–ù–∞ –≤–∞—à–æ–º—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –∑–∞–ª–∏—à–∏–ª–æ—Å—è: `{data[f'{ctx.guild.id}'][f'{ctx.author.id}']['bank']}‚Ç¥`", colour=disnake.Color.blue(), timestamp=ctx.created_at)
                    emb.set_footer(text = f"{config.BY_LINE}", icon_url = bot.user.display_avatar.url)
                    await ctx.send(embed = emb)
            else:
                emb = disnake.Embed(title="–ü–æ–º–∏–ª–∫–∞!", description=f"–ù–∞ –≤–∞—à–æ–º—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –∫–æ—à—Ç—ñ–≤!\n–ù–∞ –≤–∞—à–æ–º—É –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–º—É —Ä–∞—Ö—É–Ω–∫—É: `{data[f'{ctx.guild.id}'][f'{ctx.author.id}']['bank']}‚Ç¥`", colour=disnake.Color.blue(), timestamp=ctx.created_at)
                emb.set_footer(text = f"{config.BY_LINE}", icon_url = bot.user.display_avatar.url)
                await ctx.send(embed = emb, ephemeral=True)
    
    @bank.sub_command(description="–ü–µ—Ä–µ–¥–∞—Ç–∏ –≥—Ä–æ—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
    @commands.guild_only()
    async def pay(self, ctx, member:disnake.Member = commands.Param(description="–í–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"), money:int=commands.Param(description="–í–∫–∞–∂—ñ—Ç—å —Å—É–º—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ")):
        if member.bot:
            await ctx.send("–ë–æ—Ç –Ω–µ –º–æ–∂–µ –º–∞—Ç–∏ –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É!", ephemeral=True)
        else:
            NoInfoDate.member = ctx.author
            await NoInfoDate.check_user_data()
            NoInfoDate.member = member
            await NoInfoDate.check_user_data()

            with open('data/economy/banking_system.json', 'r', encoding='utf-8') as f:
                data = json.load(f)

            if data[f'{ctx.guild.id}'][f'{ctx.author.id}']['cash'] - money > 0:
                mn_from = data[f'{ctx.guild.id}'][f'{ctx.author.id}']['cash'] - money
                mn_to = data[f'{ctx.guild.id}'][f'{member.id}']['cash'] + money
                if mn_to > 100000000:
                    await ctx.send(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {member.mention} –Ω–µ –º–æ–∂–µ –º–∞—Ç–∏ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É –±—ñ–ª—å—à–µ `100.000.000‚Ç¥`! –ù–∞ —Ä–∞—Ö—É–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - `{data[f'{ctx.guild.id}'][f'{member.id}']['cash']}‚Ç¥`! –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ `{100000000-data[f'{ctx.guild.id}'][f'{member.id}']['cash']}‚Ç¥`", ephemeral=True)
                else:
                    data[f'{ctx.guild.id}'][f'{ctx.author.id}']['cash'] = mn_from
                    data[f'{ctx.guild.id}'][f'{member.id}']['cash'] = mn_to

                    with open('data/economy/banking_system.json', 'w') as w:
                        json.dump(data, w, indent=4)

                    emb = disnake.Embed(title="–ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ—à—Ç—ñ–≤ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!", description=f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member.mention} –±—É–ª–æ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω–æ `{money}‚Ç¥`\n–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –∑–∞–ª–∏—à–∏–ª–æ—Å—è: `{data[f'{ctx.guild.id}'][f'{ctx.author.id}']['cash']}‚Ç¥`", colour=disnake.Color.blue(), timestamp=ctx.created_at)
                    emb.set_footer(text = f"{config.BY_LINE}", icon_url = bot.user.display_avatar.url)
                    await ctx.send(embed = emb)
            else:
                emb = disnake.Embed(title="–ü–æ–º–∏–ª–∫–∞!", description=f"–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –∫–æ—à—Ç—ñ–≤!\n–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É: `{data[f'{ctx.guild.id}'][f'{ctx.author.id}']['cash']}‚Ç¥`", colour=disnake.Color.blue(), timestamp=ctx.created_at)
                emb.set_footer(text = f"{config.BY_LINE}", icon_url = bot.user.display_avatar.url)
                await ctx.send(embed = emb, ephemeral=True)

def setup(bot):
    bot.add_cog(Bank(bot))